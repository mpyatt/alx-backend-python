#!/usr/bin/env bash
# kubctl-0x01 — scale Django app, verify, load test with wrk, and show resource usage
# Repo path: messaging_app/kubctl-0x01

set -euo pipefail

# ---- Defaults (override via env or args) ----
NAMESPACE="${NAMESPACE:-default}"
DEPLOYMENT_NAME="${DEPLOYMENT_NAME:-messaging-app}"   # from deployment.yaml
SERVICE_NAME="${SERVICE_NAME:-messaging-app}"         # ClusterIP Service name
APP_LABEL="${APP_LABEL:-messaging-app}"               # k8s label: app=messaging-web
TARGET_PORT="${TARGET_PORT:-8000}"                    # container/service port
LOCAL_PORT="${LOCAL_PORT:-8000}"                      # for port-forward
REPLICAS="${REPLICAS:-3}"

# wrk settings
WRK_THREADS="${WRK_THREADS:-4}"
WRK_CONNECTIONS="${WRK_CONNECTIONS:-64}"
WRK_DURATION="${WRK_DURATION:-30s}"
WRK_PATH="${WRK_PATH:-/}"                             # path to hit

log()  { printf "\033[1;34m[INFO]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err()  { printf "\033[1;31m[ERR ]\033[0m %s\n" "$*" >&2; }

need_cmd() {
  command -v "$1" >/dev/null 2>&1 || { err "Missing required command: $1"; exit 1; }
}

install_wrk_if_missing() {
  if command -v wrk >/dev/null 2>&1; then return; fi
  warn "wrk not found; attempting install..."
  if command -v brew >/dev/null 2>&1; then
    brew install wrk || { err "Failed to install wrk via brew"; exit 1; }
  elif command -v apt-get >/dev/null 2>&1; then
    sudo apt-get update -y && sudo apt-get install -y wrk || {
      err "Failed to install wrk via apt-get"; exit 1;
    }
  else
    err "Automatic wrk install not supported on this OS. Please install wrk and re-run."
    exit 1
  fi
}

enable_metrics_if_needed() {
  if kubectl top nodes -n "$NAMESPACE" >/dev/null 2>&1; then
    return
  fi
  if command -v minikube >/dev/null 2>&1; then
    warn "kubectl top not available; enabling metrics-server addon in minikube..."
    minikube addons enable metrics-server >/dev/null 2>&1 || true
    sleep 10
  else
    warn "metrics-server not detected; 'kubectl top' may not work."
  fi
}

scale_deployment() {
  log "Scaling deployment/$DEPLOYMENT_NAME to $REPLICAS replicas (ns=$NAMESPACE)..."
  kubectl scale deployment/"$DEPLOYMENT_NAME" --replicas="$REPLICAS" -n "$NAMESPACE"
  log "Waiting for rollout to complete..."
  kubectl rollout status deployment/"$DEPLOYMENT_NAME" -n "$NAMESPACE"
}

verify_pods() {
  log "Current pods (ns=$NAMESPACE, label app=$APP_LABEL):"
  kubectl get pods -n "$NAMESPACE" -l app="$APP_LABEL" -o wide
}

run_wrk_test() {
  install_wrk_if_missing
  log "Port-forwarding svc/$SERVICE_NAME $LOCAL_PORT:$TARGET_PORT (ns=$NAMESPACE)..."
  kubectl port-forward -n "$NAMESPACE" svc/"$SERVICE_NAME" "$LOCAL_PORT":"$TARGET_PORT" >/dev/null 2>&1 &
  PF_PID=$!
  trap 'kill $PF_PID >/dev/null 2>&1 || true' EXIT INT TERM
  sleep 2

  local url="http://127.0.0.1:${LOCAL_PORT}${WRK_PATH}"
  log "Running wrk: ${WRK_THREADS} threads, ${WRK_CONNECTIONS} conns, ${WRK_DURATION} against ${url}"
  wrk -t"${WRK_THREADS}" -c"${WRK_CONNECTIONS}" -d"${WRK_DURATION}" "${url}" || true

  kill $PF_PID >/dev/null 2>&1 || true
  trap - EXIT INT TERM
}

show_resource_usage() {
  enable_metrics_if_needed
  log "Resource usage (nodes):"
  kubectl top nodes || warn "kubectl top nodes unavailable (metrics-server may need time)."
  log "Resource usage (pods in $NAMESPACE):"
  kubectl top pods -n "$NAMESPACE" || warn "kubectl top pods unavailable (metrics-server may need time)."
}

main() {
  need_cmd kubectl
  scale_deployment
  verify_pods
  run_wrk_test
  show_resource_usage
  log "Done ✅"
}

main "$@"
