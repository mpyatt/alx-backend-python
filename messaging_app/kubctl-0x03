#!/usr/bin/env bash
# Apply rolling update for messaging-app-blue and test for downtime

set -euo pipefail

# ---- Config (override via env if needed) ----
NAMESPACE="${NAMESPACE:-default}"
DEPLOYMENT_NAME="${DEPLOYMENT_NAME:-messaging-app-blue}"
SERVICE_NAME="${SERVICE_NAME:-messaging-app}"
TARGET_PORT="${TARGET_PORT:-8000}"
LOCAL_PORT="${LOCAL_PORT:-8000}"
CURL_PATH="${CURL_PATH:-/}"

DURATION_SEC="${DURATION_SEC:-45}"
CURL_INTERVAL="${CURL_INTERVAL:-0.5}"

log()  { printf "\033[1;34m[INFO]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err()  { printf "\033[1;31m[ERR ]\033[0m %s\n" "$*" >&2; }

need() { command -v "$1" >/dev/null 2>&1 || { err "Missing $1"; exit 1; }; }

apply_update() {
  log "Applying updated deployment (image -> 2.0): messaging_app/blue_deployment.yaml"
  kubectl apply -n "$NAMESPACE" -f messaging_app/blue_deployment.yaml
}

start_port_forward() {
  log "Port-forwarding svc/$SERVICE_NAME $LOCAL_PORT:$TARGET_PORT (ns=$NAMESPACE)"
  kubectl port-forward -n "$NAMESPACE" svc/"$SERVICE_NAME" "$LOCAL_PORT":"$TARGET_PORT" >/dev/null 2>&1 &
  PF_PID=$!
  # ensure cleanup
  trap 'kill ${PF_PID} >/dev/null 2>&1 || true' EXIT INT TERM
  sleep 2
}

curl_during_rollout() {
  local end ts code fail=0 total=0
  end=$(( $(date +%s) + DURATION_SEC ))
  local url="http://127.0.0.1:${LOCAL_PORT}${CURL_PATH}"
  log "Continuous curl for ~${DURATION_SEC}s at ${CURL_INTERVAL}s interval → ${url}"
  while [ "$(date +%s)" -lt "$end" ]; do
    total=$((total+1))
    # -s silent, -o discard body, -w output HTTP code only
    code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
    if [ "$code" = "200" ] || [ "$code" = "204" ]; then
      printf "."
    else
      printf "x"
      fail=$((fail+1))
    fi
    sleep "$CURL_INTERVAL"
  done
  printf "\n"
  if [ "$fail" -gt 0 ]; then
    warn "Detected ${fail}/${total} failed HTTP attempts during rollout."
  else
    log "No disruptions detected during rollout (${total} requests OK)."
  fi
}

watch_rollout() {
  log "Monitoring rollout status for deploy/$DEPLOYMENT_NAME ..."
  kubectl rollout status -n "$NAMESPACE" deploy/"$DEPLOYMENT_NAME"
}

show_pods_and_images() {
  log "Current pods:"
  kubectl get pods -n "$NAMESPACE" -l app=messaging-app -o wide
  log "Images in running pods:"
  kubectl get pods -n "$NAMESPACE" -l app=messaging-app -o jsonpath='{range .items[*]}{.metadata.name}{" => "}{range .spec.containers[*]}{.image}{" "}{end}{"\n"}{end}'
}

main() {
  need kubectl
  need curl

  apply_update
  start_port_forward
  curl_during_rollout &
  CURL_BG=$!

  watch_rollout
  wait "$CURL_BG" || true

  show_pods_and_images
  log "Rolling update complete ✅"
}

main "$@"
