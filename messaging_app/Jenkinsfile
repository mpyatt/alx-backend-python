pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
    ansiColor('xterm')
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
    booleanParam(name: 'BUILD_AND_PUSH_DOCKER', defaultValue: true, description: 'Build & push Docker image')
  }

  environment {
    // ---- Python/pytest
    VENV_DIR        = 'venv'
    APP_DIR         = 'messaging_app'
    REPORTS_DIR     = 'messaging_app/reports'

    // ---- Docker (edit to your Docker Hub namespace)
    DOCKER_IMAGE    = "${env.DOCKERHUB_USER}/messaging_app"
    DOCKER_TAG      = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH}"]],
          userRemoteConfigs: [[
            url: 'https://github.com/mpyatt/alx-backend-python.git',
            credentialsId: 'GITHUB_CREDENTIALS_ID'
          ]]
        ])
      }
    }

    stage('Set up Python & deps') {
      steps {
        sh '''
          python3 -V
          python3 -m venv ${VENV_DIR}
          . ${VENV_DIR}/bin/activate
          python -m pip install --upgrade pip wheel setuptools
          # Install app deps + test tools
          pip install -r ${APP_DIR}/requirements.txt || true
          pip install pytest pytest-django pytest-cov flake8
          mkdir -p ${REPORTS_DIR}
        '''
      }
    }

    stage('Lint (flake8)') {
      steps {
        sh '''
          . ${VENV_DIR}/bin/activate
          flake8 ${APP_DIR}
        '''
      }
    }

    stage('Test (pytest) + Coverage') {
      steps {
        sh '''
          . ${VENV_DIR}/bin/activate
          cd ${APP_DIR}
          pytest --junitxml=reports/junit.xml --cov=. --cov-report=xml:reports/coverage.xml
        '''
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: "${REPORTS_DIR}/junit.xml"
          archiveArtifacts artifacts: "${REPORTS_DIR}/*", allowEmptyArchive: true
        }
      }
    }

    stage('Build & Push Docker') {
      when { expression { return params.BUILD_AND_PUSH_DOCKER } }
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'DOCKERHUB_CREDENTIALS_ID',
          passwordVariable: 'DOCKERHUB_PASS',
          usernameVariable: 'DOCKERHUB_USER'
        )]) {
          sh '''
            docker version
            docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASS"
            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f ${APP_DIR}/Dockerfile ${APP_DIR}
            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}

            # Optionally tag :latest when building main
            if [ "${BRANCH}" = "main" ]; then
              docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
              docker push ${DOCKER_IMAGE}:latest
            fi
          '''
        }
      }
    }
  }

  post {
    always {
      echo "Build finished with status: ${currentBuild.currentResult}"
      cleanWs()
    }
  }
}
